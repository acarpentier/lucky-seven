AWSTemplateFormatVersion: '2010-09-09'
Description: 'RDS Database for pwn-ops-utils'

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DjangoSecretKey:
    Type: String
    NoEcho: true
    Description: Django SECRET_KEY for production (leave empty for auto-generation)
    Default: ''

  EverflowApiKey:
    Type: String
    NoEcho: true
    Description: Everflow API Key
    Default: ''

  EverflowNetworkId:
    Type: String
    Description: Everflow Network ID
    Default: '115'

  AdminUsername:
    Type: String
    Description: Django admin username
    Default: 'admin'

  AdminEmail:
    Type: String
    Description: Django admin email
    Default: 'admin@example.com'

  DebugMode:
    Type: String
    Default: 'False'
    AllowedValues: ['True', 'False']
    Description: Enable Django DEBUG mode

Resources:
  # Security Group for Database
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for pwn-ops-utils database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0
          Description: PostgreSQL access from anywhere
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-db-sg'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Database Subnet Group
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for pwn-ops-utils database
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-db-subnet-group'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Public Subnet 1
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-public-subnet-1'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Public Subnet 2
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-public-subnet-2'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-igw'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway Attachment
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-public-rt'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Default Route for Public Subnets
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Route Table Association for Public Subnet 1
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  # Route Table Association for Public Subnet 2
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-vpc'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Security Group for Redis
  RedisSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for pwn-ops-utils Redis cache
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          SourceSecurityGroupId: !Ref DatabaseSecurityGroup
          Description: Redis access from database security group
        - IpProtocol: tcp
          FromPort: 6379
          ToPort: 6379
          CidrIp: 10.0.0.0/16
          Description: Redis access from VPC
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-redis-sg'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Redis Subnet Group
  RedisSubnetGroup:
    Type: AWS::ElastiCache::SubnetGroup
    Properties:
      Description: Subnet group for pwn-ops-utils Redis cache
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: 'pwn-ops-utils-redis-subnet-group'
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Redis Cache Cluster
  RedisCluster:
    Type: AWS::ElastiCache::CacheCluster
    Properties:
      CacheNodeType: cache.t3.micro
      Engine: redis
      EngineVersion: '7.0'
      NumCacheNodes: 1
      CacheSubnetGroupName: !Ref RedisSubnetGroup
      VpcSecurityGroupIds:
        - !Ref RedisSecurityGroup
      Tags:
        - Key: Name
          Value: pwn-ops-utils-redis
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # ECR Repository
  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: pwn-ops-utils
      ImageScanningConfiguration:
        ScanOnPush: true
      ImageTagMutability: MUTABLE
      EncryptionConfiguration:
        EncryptionType: AES256
      Tags:
        - Key: Name
          Value: pwn-ops-utils-ecr
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Lambda function to generate Django SECRET_KEY
  DjangoSecretKeyGenerator:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: pwn-ops-utils-secret-generator
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt DjangoSecretKeyGeneratorRole.Arn
      Code:
        ZipFile: |
          import json
          import secrets
          import string
          
          def lambda_handler(event, context):
              # Generate a secure Django SECRET_KEY
              chars = string.ascii_letters + string.digits + '!@#$%^&*(-_=+)'
              secret_key = ''.join(secrets.choice(chars) for _ in range(50))
              
              return {
                  'statusCode': 200,
                  'body': json.dumps({
                      'SECRET_KEY': secret_key
                  })
              }
      Tags:
        - Key: Name
          Value: pwn-ops-utils-secret-generator
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for Lambda function
  DjangoSecretKeyGeneratorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Tags:
        - Key: Name
          Value: pwn-ops-utils-secret-generator-role
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Django Application Secrets
  DjangoAppSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: pwn-ops-utils-django-secrets
      Description: Django application secrets and configuration
      SecretString: !Sub |
        {
          "SECRET_KEY": "${DjangoSecretKey}",
          "DEBUG": "${DebugMode}",
          "EVERFLOW_API_KEY": "${EverflowApiKey}",
          "EVERFLOW_NETWORK_ID": "${EverflowNetworkId}",
          "ADMIN_USERNAME": "${AdminUsername}",
          "ADMIN_EMAIL": "${AdminEmail}",
          "POSTGRES_DB": "luckyseven",
          "POSTGRES_USER": "postgres",
          "POSTGRES_PASSWORD": "{{resolve:secretsmanager:pwn-ops-utils-db-password:SecretString:password}}",
          "POSTGRES_HOST": "${Database.Endpoint.Address}",
          "POSTGRES_PORT": "${Database.Endpoint.Port}",
          "REDIS_URL": "redis://${RedisCluster.RedisEndpoint.Address}:${RedisCluster.RedisEndpoint.Port}/0"
        }
      Tags:
        - Key: Name
          Value: pwn-ops-utils-django-secrets
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

  # Database
  Database:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: pwn-ops-utils-db
      DBName: luckyseven
      Engine: postgres
      EngineVersion: '16'
      DBInstanceClass: db.t3.medium
      AllocatedStorage: 20
      StorageType: gp3
      StorageEncrypted: true
      MasterUsername: postgres
      MasterUserPassword: !Sub '{{resolve:secretsmanager:pwn-ops-utils-db-password:SecretString:password}}'
      VPCSecurityGroups:
        - !GetAtt DatabaseSecurityGroup.GroupId
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      PubliclyAccessible: true
      BackupRetentionPeriod: 0
      DeletionProtection: false
      MultiAZ: false
      Tags:
        - Key: Name
          Value: pwn-ops-utils-db
        - Key: Project
          Value: pwn-ops-utils
        - Key: Environment
          Value: !Ref Environment

Outputs:
  DatabaseEndpoint:
    Description: RDS instance endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseEndpoint'

  DatabasePort:
    Description: RDS instance port
    Value: !GetAtt Database.Endpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-DatabasePort'

  DatabaseSecurityGroupId:
    Description: Security Group ID for the database
    Value: !Ref DatabaseSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-DatabaseSecurityGroupId'

  RedisEndpoint:
    Description: Redis cluster endpoint
    Value: !GetAtt RedisCluster.RedisEndpoint.Address
    Export:
      Name: !Sub '${AWS::StackName}-RedisEndpoint'

  RedisPort:
    Description: Redis cluster port
    Value: !GetAtt RedisCluster.RedisEndpoint.Port
    Export:
      Name: !Sub '${AWS::StackName}-RedisPort'

  RedisSecurityGroupId:
    Description: Security Group ID for Redis
    Value: !Ref RedisSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-RedisSecurityGroupId'

  ECRRepositoryURI:
    Description: ECR Repository URI
    Value: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ECRRepository}'
    Export:
      Name: !Sub '${AWS::StackName}-ECRRepositoryURI'

  DjangoSecretsArn:
    Description: ARN of Django application secrets
    Value: !Ref DjangoAppSecrets
    Export:
      Name: !Sub '${AWS::StackName}-DjangoSecretsArn'

  DjangoSecretsName:
    Description: Name of Django application secrets
    Value: !Ref DjangoAppSecrets
    Export:
      Name: !Sub '${AWS::StackName}-DjangoSecretsName'
